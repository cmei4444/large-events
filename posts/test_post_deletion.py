"""Unit tests for posts deletion."""

# Authors: mukobi
# Copyright 2019 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import unittest
import mongomock
import app

FAKE_POSTS = [
    {
        # "_id" is generated by pymongo when inserted into collection
        "event_id": "picnic",
        "author_id": "mukobi",
        "created_at": "2017-10-06T00:00:00+00:00",
        "text": "This is the description of a picnic post.",
        "images": [
            "https://upload.wikimedia.org/wikipedia/commons/6/66/"
            "An_up-close_picture_of_a_curious_male_domestic_short"
            "hair_tabby_cat.jpg",
            "http://4.bp.blogspot.com/-w8U75TCuhgU/Tzw8TmaclvI/AA"
            "AAAAAABJ0/6fMMcRLAceM/s1600/Rabbit3.jpg"
        ]
    },
    {
        # "_id" is generated by pymongo when inserted into collection
        "event_id": "aquarium",
        "author_id": "cmei4444",
        "created_at": "2011-11-11T00:00:00+00:00",
        "text": "This is the description of an aquarium post.",
        "images": [
            "https://upload.wikimedia.org/wikipedia/commons/0/02/"
            "Sea_Otter_%28Enhydra_lutris%29_%2825169790524%29_crop.jpg"
        ]
    },
    {
        # "_id" is generated by pymongo when inserted into collection
        "event_id": "aquarium",
        "author_id": "john_wick",
        "created_at": "2014-10-24T00:00:00+00:00",
        "text": "This is another aquarium post.",
        "images": []
    }
]


class TestPostDeletion(unittest.TestCase):
    """Test app.delete_post()."""

    def setUp(self):
        """Seed mock db."""
        self.collection = mongomock.MongoClient().db.collection
        self.collection.insert_many(FAKE_POSTS)

    def test_delete_one(self):
        """Delete a single post."""
        post_id = FAKE_POSTS[0]["_id"]
        author_id = FAKE_POSTS[0]["author_id"]
        _, status_code = app.delete_post(
            post_id, author_id, self.collection)
        self.assertEqual(status_code, 204)
        self.assertEqual(
            self.collection.count_documents({}), len(FAKE_POSTS) - 1)

    def test_delete_all(self):
        """Delete all posts."""
        for post in FAKE_POSTS:
            post_id = post["_id"]
            author_id = post["author_id"]
            _, status_code = app.delete_post(
                post_id, author_id, self.collection)
            self.assertEqual(status_code, 204)
        self.assertEqual(self.collection.count_documents({}), 0)

    def test_not_existing_post_id(self):
        """Can't find post by ID, don't delete."""
        post_id = "C0011C3DC0FFEED0000000DE"   # invalid
        author_id = FAKE_POSTS[0]["author_id"]  # valid
        _, status_code = app.delete_post(
            post_id, author_id, self.collection)
        self.assertEqual(status_code, 404)
        self.assertEqual(self.collection.count_documents({}), len(FAKE_POSTS))

    def test_not_existing_author_id(self):
        """Wrong author_id, don't delete."""
        post_id = FAKE_POSTS[0]["_id"]                   # valid
        author_id = "I don't think, therefore I'm not."  # invalid
        _, status_code = app.delete_post(
            post_id, author_id, self.collection)
        self.assertEqual(status_code, 404)
        self.assertEqual(self.collection.count_documents({}), len(FAKE_POSTS))

    def test_mismatched_author_id(self):
        """Wrong author_id, don't delete."""
        post_id = FAKE_POSTS[0]["_id"]          # valid
        author_id = FAKE_POSTS[1]["author_id"]  # valid, but doesn't match
        _, status_code = app.delete_post(
            post_id, author_id, self.collection)
        self.assertEqual(status_code, 404)
        self.assertEqual(self.collection.count_documents({}), len(FAKE_POSTS))


if __name__ == '__main__':
    unittest.main()
